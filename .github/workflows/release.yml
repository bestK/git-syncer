name: Release Build

on:
    release:
        types: [created]

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: '1.21'

            - name: Build Multi-Platform Binaries
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
                  GIT_COMMIT=$(git rev-parse --short HEAD)

                  # 创建构建目录
                  mkdir -p build
                  mkdir -p temp

                  platforms=("windows/amd64" "windows/386" "linux/amd64" "linux/386" "darwin/amd64" "darwin/arm64")

                  for platform in "${platforms[@]}"
                  do
                    platform_split=(${platform//\// })
                    GOOS=${platform_split[0]}
                    GOARCH=${platform_split[1]}
                    output_dir=git-syncer-$GOOS-$GOARCH
                    output_name=git-syncer
                    
                    # 创建临时目录
                    mkdir -p "temp/$output_dir"
                    
                    if [ $GOOS = "windows" ]; then
                      output_name+='.exe'
                      # 复制 Windows 批处理文件
                      cp shell/windows/*.bat "temp/$output_dir/"
                    fi
                    
                    echo "Building for $GOOS/$GOARCH"
                    GOOS=$GOOS GOARCH=$GOARCH go build \
                      -ldflags "-X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'" \
                      -o "temp/$output_dir/$output_name"
                    
                    # 复制配置文件示例
                    cp config.example.yaml "temp/$output_dir/"
                    
                    # 打包
                    cd temp
                    if [ $GOOS = "windows" ]; then
                      zip -r "../build/$output_dir.zip" "$output_dir"
                    else
                      tar -czf "../build/$output_dir.tar.gz" "$output_dir"
                    fi
                    cd ..
                  done

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      build/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
